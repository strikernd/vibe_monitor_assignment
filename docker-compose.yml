services:
  loki:
    image: grafana/loki:3.0.0
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    restart: unless-stopped

  alloy:
    image: grafana/alloy:latest
    ports:
      - "12345:12345"
      - "4317:4317"   # <<--- OTLP gRPC receiver
      - "4318:4318"   # <<--- OTLP HTTP receiver
    volumes:
      - ./alloy/config.alloy:/etc/alloy/config.alloy
      - /var/run/docker.sock:/var/run/docker.sock:ro            # <<--- allow docker discovery
      - /var/lib/docker/containers:/var/lib/docker/containers:ro  # <<--- read raw container logs
      - /var/log:/var/log:ro                        
    command: run /etc/alloy/config.alloy --server.http.listen-addr=0.0.0.0:12345
    environment:
      - ALLOY_LOG_LEVEL=debug
    restart: unless-stopped

  tempo:
    image: grafana/tempo:2.8.1
    ports:
      - "3200:3200"
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - "./tempo/config.yml:/etc/tempo.yaml"


  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/config.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - "--web.enable-remote-write-receiver" 
    restart: unless-stopped

  grafana:
    image: grafana/grafana-enterprise
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/data:/var/lib/grafana
    depends_on:
      - prometheus
      - loki
      - tempo
    restart: unless-stopped

  fastapi:
    build:
      context: ./app
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      OTEL_SERVICE_NAME: fastapi-demo
      OTEL_EXPORTER_OTLP_ENDPOINT: http://alloy:4317
    depends_on:
      - prometheus
      - tempo
    restart: unless-stopped

  traffic:
    build: ./app
    container_name: traffic-generator
    command: python generate_traffic.py
    depends_on:
      - fastapi
    restart: unless-stopped